<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>八仔驿站</title>
    <link>https://willisyi.github.io/website/</link>
    <description>Recent content on 八仔驿站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Nov 2020 17:31:33 +0800</lastBuildDate><atom:link href="https://willisyi.github.io/website/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ARM Cortex-M 流水线与指令预取pipeline &amp; prefetch</title>
      <link>https://willisyi.github.io/website/post/prefetch-and-pipeline-m/</link>
      <pubDate>Thu, 12 Nov 2020 17:31:33 +0800</pubDate>
      
      <guid>https://willisyi.github.io/website/post/prefetch-and-pipeline-m/</guid>
      <description>ARM Cortex-M 流水线与指令预取pipeline &amp;amp; prefetch [TOC]
最近的项目碰到了ECC的问题， 但问题的根源其实跟Arm-v7m架构的指令预取（instruction prefetch）有关。
​	项目调试的NXP i.MX8系列上的Cortex-M4F 核的TCM（Tightly-Coupled Memory， 具有与Core相同频率的RAM）有ECC功能，程序的代码入口放在外部的QSPI flash上, 但是有一部分时间敏感（需要快速执行）的代码被放到了内部TCM上的QuickAccess段。我们发现代码执行时偶尔会有”触碰“ QuickAccess段之外的TCM的情况（触发了ECC error, 我们只对用到的TCM进行了ECC clean, CPU读没有用到的TCM时会触发ECC error)。最后发现是因为如果CPU执行到QuickAccess段的末尾时，由于M4有PFU(prefetch unit, 下面会介绍)，在当前指令执行完成前会从内存中获取指令以填充流水线， 而指令的预取基于分支预测。
 Branch prediction
Is where a processor chooses a future execution path to prefetch along (see Prefetching). For example, after a branch instruction, the processor can choose to prefetch either the instruction following the branch or the instruction at the branch target.
 ​	也就是说处理器可以选择预取当前分支接下来的指令或者跳转后的目标分支的指令， 这也就导致了我们的软件偶发ECC error。 假如预取当前分支接下来的指令，则会访问超出QuickAccess段的TCM，这时触发ECC， 系统宕机。 通常情况下，软件是不需要关心流水线pipeline与指令预取的，他们对于软件执行来说是透明的。</description>
    </item>
    
    <item>
      <title>Windows上的包管理工具</title>
      <link>https://willisyi.github.io/website/post/choco/</link>
      <pubDate>Wed, 21 Oct 2020 11:20:35 +0800</pubDate>
      
      <guid>https://willisyi.github.io/website/post/choco/</guid>
      <description>Windows上的巧克力味Chocolatey Zypher的windows开发环境搭建需要安装Chocolatey。于是看了下这个巧克力味。
Chocolatey是一款专为Windows系统开发的、基于NuGet的包管理器工具，类似于Node.js的npm，MacOS的brew，Ubuntu的apt-get，它简称为choco。Chocolatey的设计目标是成为一个去中心化的框架，便于开发者按需快速安装应用程序和工具。
Chocolatey的官网： https://chocolatey.org/
 Chocolatey安装 Install chocolatey Chocolatey用法   search - 搜索包 choco search something list - 列出包 choco list -lo install - 安装 choco install baretail pin - 固定包的版本，防止包被升级 choco pin windirstat upgrade - 安装包的升级 choco upgrade baretail uninstall - 安装包的卸载 choco uninstall baretail 安装Ruby Gem - choco install compass -source ruby 安装Python Egg - choco install sphynx -source python 安装IIS服务器特性 - choco install IIS -source windowsfeatures 安装Webpi特性 - choco install IIS7.</description>
    </item>
    
    <item>
      <title>使用Hugo快速创建静态网页</title>
      <link>https://willisyi.github.io/website/post/first/</link>
      <pubDate>Sat, 10 Oct 2020 11:12:02 +0800</pubDate>
      
      <guid>https://willisyi.github.io/website/post/first/</guid>
      <description>The world’s fastest framework for building websites 中文版介绍及网站搭建分享 github</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://willisyi.github.io/website/about/</link>
      <pubDate>Sat, 10 Oct 2020 11:10:41 +0800</pubDate>
      
      <guid>https://willisyi.github.io/website/about/</guid>
      <description>个人博客
支持作者</description>
    </item>
    
  </channel>
</rss>
